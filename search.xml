<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[更改项目的Jenkins部署]]></title>
      <url>/2018/04/09/%E6%9B%B4%E6%94%B9%E9%A1%B9%E7%9B%AE%E7%9A%84Jenkins%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/Jenkins_Needs_You.png" alt=""><a id="more"></a></p>
<p>　　下午对项目的Jenkins部署进行了更改，所以在这里对此做一个小小的总结。Jenkins是用于持续构建的可视化web工具，可以对项目进行自动化编译、打包、分发部署。Jenkins可以很好地兼容ant、maven、gradle等构建工具，可以和svn、git等版本控制工具无缝集成。总的来说就是：让我们懒一点，很省事！</p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　之前我们项目在测试环境部署时，都是部署在一台服务器上的，后来有了其他项目，他们图省事也部署到了同一台上，到后期阶段，同一台服务器的性能瓶颈就越来越被放大了，时常cpu飙高。所以又重开了两台服务器，专门用于部署我们的项目。于是，我需要更改Jenkins的一些设置，以便之后项目构建时能部署到新的两台服务器上。</p>
<h2 id="更改过程"><a href="#更改过程" class="headerlink" title="更改过程"></a>更改过程</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>　　首先我对新开的两台服务器环境进行配置（基本的jdk之类的配置就略过不说了），我将项目分为web和service两部分，web部署一台，service部署一台。在两台服务器上分别建立相应的jar包所在文件夹，启动服务的shell脚本，日志记录，编译服务所需的动态库，开启相应服务所对应的端口等等，总之就是将原来的服务器环境配置平移拆解到新开的两台服务器上，这个视原先具体的部署情况而定，这里不多做说明。</p>
<h3 id="项目配置修改"><a href="#项目配置修改" class="headerlink" title="项目配置修改"></a>项目配置修改</h3><p>　　首先需要修改每个项目的配置。进入Jenkins页面，可以看到项目列表，如下图所示：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/jenkins_projects.jpg" alt=""></p>
<p>　　点击“test.admin”，进入Project，然后点击左侧的配置，对项目配置进行修改，这里我们主要修改构建部分的内容。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/deploy_setting.jpg" alt=""></p>
<p>　　这里我已经修改完成，实际修改时，我们只能修改“Command”部分的内容，“SSH site”部分是select框，里面的服务器地址需要在其他地方设置后，才能在这里进行选择。下面我们说说如何添加SSH site。</p>
<h3 id="添加SSH-site"><a href="#添加SSH-site" class="headerlink" title="添加SSH site"></a>添加SSH site</h3><p>　　上面说到需要修改构建部分，其实构建部分就是两个操作：</p>
<ol>
<li>执行打包操作，生成相应的新jar包</li>
<li>执行shell脚本，拷贝jar包到远程主机上，并执行启动脚本</li>
</ol>
<p>　　其中第2步操作需要安装SSH插件，如下所示。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/jenkins_ssh_plugin.jpg" alt=""></p>
<p>　　我已经安装过这个插件了。下面说添加SSH site的操作，还是回到Jenkins主页面，点击左侧栏的系统管理，进入“管理Jenkins”页面后，点击“系统设置”，在“SSH remote hosts”项增加新的SSH site，如下所示：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/add_ssh_site.jpg" alt=""></p>
<p>　　添加红框部分的设置即可，之后回到项目配置页面，SSH site选项中就会有添加的服务器地址。</p>
<h3 id="SSH免密设置"><a href="#SSH免密设置" class="headerlink" title="SSH免密设置"></a>SSH免密设置</h3><p>　　这时候，当我们去构建某一个项目时，可能会出现“Host key verification failed”或者“Permission denied”的错误，这是因为在执行scp操作时，需要验证密码。那么如何实现免密执行scp命令呢？假设Jenkins所在服务器为A，远程服务器为B，我们需要在A上执行scp命令，将jar包传到B服务器上。</p>
<p>　　在A上执行以下步骤：</p>
<ol>
<li><code>ssh-keygen -t rsa</code>，输入命令后一直按回车就行</li>
<li><code>ssh root@xxx.xxx.xxx.xxx &quot;chmod 0700 .ssh&quot;</code></li>
<li><code>scp ~/.ssh/id_rsa.pub root@xxx.xxx.xxx.xxx:.ssh/id_rsa.pub</code></li>
</ol>
<p>　　上面步骤中xxx.xxx.xxx.xxx即为B服务器的ip地址。</p>
<p>　　在B上执行以下步骤：</p>
<ol>
<li><code>touch /root/.ssh/authorized_keys</code></li>
<li><code>chmod 600 ~/.ssh/authorized_keys</code></li>
<li><code>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</code></li>
</ol>
<p>　　完成上面6个步骤后就可以实现免密操作了，可以在A服务器上输入：</p>
<p>　　<code>ssh root@xxx.xxx.xxx.xxx</code></p>
<p>　　发现能直接登录到B服务器。</p>
<h2 id="更改完成"><a href="#更改完成" class="headerlink" title="更改完成"></a>更改完成</h2><p>　　此时再次执行构建，打开Console Output，会看到执行成功，查看具体项目的日志，确认服务已经启动。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/console_output.jpg" alt=""></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
        <categories>
            
            <category> jenkins </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用ORDER BY和LIMIT分页时的数据重复问题]]></title>
      <url>/2018/02/09/%E4%BD%BF%E7%94%A8ORDER-BY%E5%92%8CLIMIT%E5%88%86%E9%A1%B5%E6%97%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/its.jpg" alt=""><a id="more"></a></p>
<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p>　　今天测试在看板上给我提交了一个bug，他发现在翻页时，下一页会出现上一页出现过的数据。那么这是怎么回事呢？先看一下我的sql语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM tb_settlement ORDER BY type,code LIMIT offset,pageSize</div></pre></td></tr></table></figure>
<p>　　好像没有啥问题，但是既然出现重复数据，那很显然就是LIMIT分页语句没有生效，或者未按我预想的方向生效。仔细想一下，这条sql语句的预想结果是首先根据ORDER BY先后按type和code进行排序，然后取出指定偏移位置之后的数据。但是事实并没有按这种结果显示，所以第一猜测就是ORDER BY和LIMIT之间没有协同好。</p>
<h4 id="MySQL官方手册说明"><a href="#MySQL官方手册说明" class="headerlink" title="MySQL官方手册说明"></a>MySQL官方手册说明</h4><p>　　我的mysql版本是5.6的，所以我查询了mysql5.6版本的官方手册，下面是ORDER BY和LIMIT的说明：</p>
<p>　　1、<a href="https://dev.mysql.com/doc/refman/5.6/en/order-by-optimization.html#order-by-filesort-in-memory" target="_blank" rel="external">ORDER BY Optimization</a></p>
<p>　　2、<a href="https://dev.mysql.com/doc/refman/5.6/en/limit-optimization.html" target="_blank" rel="external">LIMIT Query Optimization</a></p>
<h5 id="LIMIT的用法说明"><a href="#LIMIT的用法说明" class="headerlink" title="LIMIT的用法说明"></a>LIMIT的用法说明</h5><p>　　我们先不看ORDER BY，而是先看一下LIMIT的用法。</p>
<blockquote>
<p>If you combine <code>LIMIT</code>  <em>row_coun</em> with <code>ORDER BY</code>, MySQL stops sorting as soon as it has found the first <em>row_count</em> rows of the sorted result, rather than sorting the entire result. If ordering is done by using an index, this is very fast. If a filesort must be done, all rows that match the query without the <code>LIMIT</code> clause are selected, and most or all of them are sorted, before the first <em>row_count</em> are found. After the initial rows have been found, MySQL does not sort any remainder of the result set.</p>
</blockquote>
<p>　　这里主要的意思是说ORDER BY和LIMIT结合使用时，mysql在排序到LIMIT指定的数时就不会继续对之后的数据进行排序了，似乎对我们的问题没有多少帮助。接着往后看：</p>
<blockquote>
<p>If an index is not used for <code>ORDER BY</code> but a <code>LIMIT</code> clause is also present, the optimizer may be able to avoid using a merge file and sort the rows in memory using an in-memory <code>filesort</code> operation. For details, see <a href="https://dev.mysql.com/doc/refman/5.6/en/order-by-optimization.html#order-by-filesort-in-memory" target="_blank" rel="external">The In-Memory filesort Algorithm</a>.</p>
</blockquote>
<p>　　这句话似乎终于说到我们关心的东西了，当我们对非索引的列使用ORDER BY时，优化器会进行in-memory的文件排序操作。继续看下一句话：</p>
<blockquote>
<p>If multiple rows have identical values in the <code>ORDER BY</code> columns, the server is free to return those rows in any order, and may do so differently depending on the overall execution plan. In other words, the sort order of those rows is nondeterministic with respect to the nonordered columns.</p>
</blockquote>
<p>　　这里终于给我们下了个结论，当ORDER BY后的列出现重复值或者说相同值时，那这些数据就不会按确定的顺序列出，每次操作后显示的顺序可能并不一样。<br>　　到此可以舒口气了，不是我的bug，是mysql自己进行优化了。</p>
<h5 id="ORDER-BY的用法说明"><a href="#ORDER-BY的用法说明" class="headerlink" title="ORDER BY的用法说明"></a>ORDER BY的用法说明</h5><p>　　接下来再来看看ORDER BY Optimization，其实在说到in-memory时，mysql就给出了in-memory的算法链接了，这个链接就是到ORDER BY Optimization页面的。</p>
<blockquote>
<p>MySQL has multiple <code>filesort</code> algorithms for sorting and retrieving results. The original algorithm uses only the <code>ORDER BY</code> columns. The modified algorithm uses not just the <code>ORDER BY</code> columns, but all columns referenced by the query. There is also an algorithm for small result sets that sorts in memory using the sort buffer as a priority queue without a merge file.</p>
</blockquote>
<p>　　这里说，mysql其实有多种文件排序的算法，最初的算法是只根据ORDER BY指定的列排序，后来又修改为不只按ORDER BY指定的列，而是会把查询语句所有相关联的列都指定进来。而现在，对于小的结果集，mysql又采用priority queue来进行排序。<br>　　这里是这个算法的一些说明：</p>
<blockquote>
<p>The sort buffer has a size of <a href="https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_sort_buffer_size" target="_blank" rel="external"><code>sort_buffer_size</code></a>. If the sort elements for <em>N</em> rows are small enough to fit in the sort buffer (<em>M</em>+<em>N</em> rows if <em>M</em> was specified), the server can avoid using a merge file and performs an in-memory sort by treating the sort buffer as a priority queue:</p>
<ol>
<li>Scan the table, inserting the select list columns from each selected row in sorted order in the queue. If the queue is full, bump out the last row in the sort order.</li>
<li>Return the first <em>N</em> rows from the queue. (If <em>M</em> was specified, skip the first <em>M</em> rows and return the next <em>N</em> rows.)</li>
</ol>
<p>Absent that optimization, the server performs this operation by using a merge file for the sort:</p>
<ol>
<li>Scan the table, repeating these steps through the end of the table:<ul>
<li>Select rows until the sort buffer is filled.</li>
<li>Write the first <em>N</em> rows in the buffer (<em>M</em>+<em>N</em> rows if <em>M</em> was specified) to a merge file.</li>
</ul>
</li>
<li>Sort the merge file and return the first <em>N</em> rows. (If <em>M</em> was specified, skip the first <em>M</em> rows and return the next <em>N</em> rows.)</li>
</ol>
<p>The cost of the table-scan operation is the same for the queue and merge-file methods, so the optimizer chooses between methods based on other costs:</p>
<ul>
<li>The queue method involves more CPU for inserting rows into the queue in order.</li>
<li>The merge-file method has I/O costs to write and read the file and CPU cost to sort it.</li>
</ul>
<p>The optimizer considers the balance between these factors for particular values of <em>M</em>, <em>N</em>, and the row size.</p>
<p>An <code>ORDER BY</code> with and without <code>LIMIT</code> may return rows in different orders, as discussed in <a href="https://dev.mysql.com/doc/refman/5.6/en/limit-optimization.html" target="_blank" rel="external">Section 8.2.1.16, “LIMIT Query Optimization”</a>.</p>
</blockquote>
<p>　　上面主要对比了算法的排序开销，priority queue 使用了堆排序的排序方法，而堆排序是一种不是那么稳定的排序方法，对于相同的值可能排序出来的结果和读出来的数据顺序并不一致。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>　　综上，我们知道了出现这个问题的原因，那么解决起来就容易了。为了修改这个bug，我们需要把type和code修改为索引列，或者在code后面再加一个带索引的列，比如id，这样就可以达到我们所期望的ORDER BY和LIMIT协同的结果。</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java_API CTP结算单乱码处理]]></title>
      <url>/2018/02/06/Java-API-CTP%E7%BB%93%E7%AE%97%E5%8D%95%E4%B9%B1%E7%A0%81%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/jni.png" alt=""><a id="more"></a></p>
<p>　　最近有个需求是要得到期货公司手续费，看了CTP的接口文档，貌似并没有这个接口，后来重新翻了一次，发现OnRspQrySettlementInfo方法会返回结算单消息正文TThostFtdcContentType Content ，于是打印了一下，发现确实可以从结算单里拿到手续费。但是有两个问题，1、返回的数据是分多次发送的，需要拼接，不过这一点可以通过bIsLast进行识别；2、拿到的结算单数据是乱码，因为CTP貌似采用的是GB2312编码 。所以我需要将拿回的结算单进行转码，要做到这一点，就需要添加JNI的转换代码。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>　　CTP的的api是C++的，当初是通过swig得到jar包，并且封装C++动态库的，但是当时并没有考虑转码的问题，所以需要添加转码操作。这里有一篇文章是关于linux下CTP Java API编译的（<a href="http://blog.csdn.net/pjjing/article/details/53187469" target="_blank" rel="external">点这里</a>）。现在linux下的文件像这样：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/tradewrap.jpg" alt=""></p>
<h5 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h5><p>　　这里需要做修改是makefile和thosttraderapi_wrap.cpp，makefile修改相对简单，添加下面红框部分即可。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/makefile.jpg" alt=""></p>
<p>　　因为这里需要libiconv库进行转码。</p>
<h5 id="thosttraderapi-wrap-cpp"><a href="#thosttraderapi-wrap-cpp" class="headerlink" title="thosttraderapi_wrap.cpp"></a>thosttraderapi_wrap.cpp</h5><p>　　之后就是修改thosttraderapi_wrap.cpp这个文件，在文件里找到Java_jctp_api_thosttradeapiJNI_CThostFtdcSettlementInfoField_1Content_1get这个方法，在方法上面添加下图所示的引入。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/include.jpg" alt=""></p>
<p>　　图中有一些引入是之前写的，后来某些函数用不到了也没有删。然后对方法进行适当的修改，我是通过iconv的函数进行转码的，这个转换库的资料相对来说还是挺少的，这里有一篇还不错（<a href="http://blog.csdn.net/fengmm521/article/details/78438687" target="_blank" rel="external">点这里</a>）。因为不太懂C++，所以专门学习了下C++的语法，然后写了转换代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">SWIGEXPORT jstring JNICALL</div><div class="line">Java_jctp_api_thosttradeapiJNI_CThostFtdcSettlementInfoField_1Content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) &#123;</div><div class="line">  jstring jresult = <span class="number">0</span> ;</div><div class="line">  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) <span class="number">0</span> ;</div><div class="line">  <span class="keyword">char</span> *result = <span class="number">0</span> ;</div><div class="line"></div><div class="line">  (<span class="keyword">void</span>)jenv;</div><div class="line">  (<span class="keyword">void</span>)jcls;</div><div class="line">  (<span class="keyword">void</span>)jarg1_;</div><div class="line">  arg1 = *(CThostFtdcSettlementInfoField **)&amp;jarg1;</div><div class="line">  result = (<span class="keyword">char</span> *) ((arg1)-&gt;Content);</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(result) &#123;</div><div class="line">     <span class="keyword">size_t</span> inlen = <span class="built_in">strlen</span>(result);</div><div class="line">     <span class="keyword">iconv_t</span> cd;</div><div class="line">     cd = iconv_open(<span class="string">"UTF-8//TRANSLIT//IGNORE"</span>, <span class="string">"GB2312"</span>);</div><div class="line"></div><div class="line">     <span class="keyword">char</span> *outbuf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(inlen * <span class="number">4</span>);</div><div class="line">     <span class="keyword">if</span>(outbuf==<span class="literal">NULL</span>)&#123;</div><div class="line">        jresult=jenv-&gt;NewStringUTF((<span class="keyword">const</span> <span class="keyword">char</span> *)result);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">memset</span>(outbuf,<span class="number">0</span>,inlen * <span class="number">4</span>);</div><div class="line">        <span class="keyword">char</span> *in = result;</div><div class="line">        <span class="keyword">char</span> *out = outbuf;</div><div class="line">        <span class="keyword">size_t</span> in_len = inlen;</div><div class="line">        <span class="keyword">size_t</span> out_len = inlen * <span class="number">4</span>;</div><div class="line">        iconv(cd, &amp;in, &amp;in_len, &amp;out, &amp;out_len);</div><div class="line">        jresult = jenv-&gt;NewStringUTF((<span class="keyword">const</span> <span class="keyword">char</span> *)outbuf);</div><div class="line">        <span class="built_in">free</span>(outbuf);</div><div class="line">     &#125;</div><div class="line">     iconv_close(cd);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> jresult;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里通过malloc分配内存，所以最后记得用free释放一下。考虑到转换后空间不足的问题，我直接inlen * 4粗暴地分配了，保证有足够的转换空间。然后我忽略了iconv(iconv_t cd,  char * * inbuf, size_t * inbytesleft,   char* * outbuf, size_t * outbytesleft)的errno的处理，而是直接在iconv_open时添加了//TRANSLIT//IGNORE，这里//TRANSLIT和//IGNORE的使用，网上介绍iconv时说的比较少，他们可以单独使用，也可以串联起来使用，表示在转码不支持时采用近似的编码，不行的话直接忽略。我的转换代码并不是非常严谨，不能保证所有字节都完全正常转换，但结果是符合我的预期的，几乎没有缺失和乱码。<br>　　做完上述更改后，make重新编译一下，将libthosttraderapi_wrap.so这个动态库复制到你的java.library.path下面，如果不知道的话，可以System.getProperty(“java.library.path”)看一下，然后通过System.loadLibrary()加载，这样就完成了转码操作。</p>
<h5 id="iconv库"><a href="#iconv库" class="headerlink" title="iconv库"></a>iconv库</h5><p>　　整个转码中，最重要的就是iconv库，如果环境里没有的话需要自己编译，具体可以<a href="https://www.gnu.org/software/libiconv/" target="_blank" rel="external">看这里</a>，linux环境下已经有这个库的，也许还需要做一下软连接，具体的可以看问题进行处理，这里就不说了。</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>　　在修改makefile和thosttraderapi_wrap.cpp时记得做备份，libthosttraderapi.so和libthosttraderapi_wrap.so这两个动态库也做下备份，方便修改和复原。</p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JNI </tag>
            
            <tag> C++ </tag>
            
            <tag> CTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何防止浏览器自动填写表单]]></title>
      <url>/2017/12/12/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/hellooooo-long-time-no-see-how-are-you.jpg" alt=""><a id="more"></a></p>
<p> 　　有好一段时间没有更新了，除了忙之外，主要还是懒……转眼间2017就将结束，这一年里发生了太多事，给自己加了很多压力，对自己的状态也不太满意。未来一年还有很多任务需要完成，挑战很多，但都不足够把我打倒！言归正传，感慨后面再说，今天主要是做一个小总结。前两天在做项目官网的浏览器适配（这个后面单独再写一篇），过程中PM和测试反映说有些表单会有自动填入的问题，沟通了下发现是他们曾允许浏览器保存过密码，所以在同样需要输入登录名和密码的页面时，浏览器会自动填入那些数据，但这些数据并不一定是该页面的。总之一句话，要避免自动填入这种情况，因为体验不好。那么怎么做呢？</p>
<h3 id="实施方案"><a href="#实施方案" class="headerlink" title="实施方案"></a>实施方案</h3><h4 id="设置autocomplete属性"><a href="#设置autocomplete属性" class="headerlink" title="设置autocomplete属性"></a>设置autocomplete属性</h4><p>　　一般来说，我通常在input标签内会输入“autocomplete=”off””，但是这次似乎对一些浏览器并不起效果。于是更改了autocomplete的值，设置“autocomplete=”new-password””，测试后发现仍然无效，浏览器还是固执地填入了不该有的数据。</p>
<h4 id="添加隐藏的type-”password”的input标签"><a href="#添加隐藏的type-”password”的input标签" class="headerlink" title="添加隐藏的type=”password”的input标签"></a>添加隐藏的type=”password”的input标签</h4><p>　　　　于是我又上stackoverflow求医问药，发现有网友提出下面的答案：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/autocompelete.png" alt=""></p>
<p>　　这里说谷歌浏览器只会自动填充第一个type=”password”的input标签和前一个input标签，我按上面的方案进行设置，发现360浏览器依然自动填入数据。</p>
<h4 id="设置input标签为readonly"><a href="#设置input标签为readonly" class="headerlink" title="设置input标签为readonly"></a>设置input标签为readonly</h4><p>　　万般无奈，既然你浏览器固执地要填入数据，好！那我就索性把input给只读了，设置readonly，看你怎么自动填充，然后再设置一个函数，当input框聚焦的时候再去除readonly属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">onfocus</span>=<span class="string">"this.removeAttribute('readonly');"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>　　这样设置后，360浏览器也变乖了，不再淘气地自动填写表单数据了。但是对于IE兼容模式，这样处理仍然有一个问题，就是输入框需要点击两次才能正常输入（唉，落后的IE惹人嫌）。</p>
<h4 id="设置input标签type-”text”"><a href="#设置input标签type-”text”" class="headerlink" title="设置input标签type=”text”"></a>设置input标签type=”text”</h4><p>　　不得已，只能另谋出路了。因为浏览器是根据input的type属性进行辨别的，如果type=”password”时，浏览器就会识别进行自动填充。所以我把input的type属性设置为text，并设置一个函数，在输入框聚焦时更改text为password。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pass"</span> <span class="attr">autocomplete</span>=<span class="string">"new-password"</span> <span class="attr">onfocus</span>=<span class="string">"this.type='password'"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　就像上面这样，同时设置一个隐藏的input，获取第一个iniput的值。在表单提交前，利用js代码重新设置第一个input的type属性为text，并清空它的值，避免浏览器保存输入值。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>　　上面综合起来总共四种方案，前三个方案都有一定效果，但并不适用于我测试的所有浏览器。只有第四种能在各个浏览器上实现满意的效果，当然这个方案也更复杂一些。另外说一句，IE啥的，还是该淘汰淘汰吧，我觉得适配它们都是浪费时间的行为。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈UML类图]]></title>
      <url>/2017/10/10/%E6%B5%85%E8%B0%88UML%E7%B1%BB%E5%9B%BE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/uml.png" alt=""><a id="more"></a></p>
<p>　　<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="external">UML</a>（Unified Modeling Language），是一种开放的方法，用于说明、可视化、构建和编写一个正在开发的、面向对象的、软件密集系统的制品的开放方法（来自维基百科）。在很多技术书籍中，都能看到它的身影，很多时候我们都会忽略它，而实际上只要稍加学习，了解其基本知识，就会发现其实读UML类图远比看文字来的更深刻。好了，现在就来浅谈一下UML类图吧。</p>
<h3 id="类和接口的UML类图"><a href="#类和接口的UML类图" class="headerlink" title="类和接口的UML类图"></a>类和接口的UML类图</h3><h4 id="类的表示"><a href="#类的表示" class="headerlink" title="类的表示"></a>类的表示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Class Programmer &#123;</div><div class="line">    <span class="keyword">private</span> String sex;</div><div class="line">    <span class="keyword">private</span> String language;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</div><div class="line">      <span class="comment">//writing code with language</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　像上面这样一个类，用UML类图表示就如下图所示：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML__Programmer.png" alt=""></p>
<p>　　其中第一行为类名，如果该类是抽象类，则这一行的字体为斜体；第二行为类的属性，第三行为类的方法。而属性前面的“-”号表示该属性由private修饰，如果为public，则用“+”，如果为protected，则用“#”。方法write前面的“+”号类同，表示该方法由public修饰。这里这个类图表示的是一般情况下的类，如果一个类包含有内部类，则还有第四行，这里就不展开了。</p>
<h4 id="接口的表示"><a href="#接口的表示" class="headerlink" title="接口的表示"></a>接口的表示</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　该接口的UML类图如下：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_drive.png" alt=""></p>
<p>　　在接口中，通常没有属性，而且操作都是抽象的，只做了操作的声明（Java8中添加了默认方法），没有操作的实现。这里的类图中，接口名上方有“&lt;&lt;interface&gt;&gt;”，表示接口，这种表示方法又称矩形表示法或者内部视图。除此之外，还有一种在其他类实现该接口时的表示方法，如下所示：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_Mazda.png" alt=""></p>
<p>　　这里的圈圈就表示Mazda类继承了的接口，暂且认为是Drive接口，这个接口里有run()方法。用一个圈圈表示接口，这种方法有一个很有趣的叫法：棒棒糖表示法，也叫外部视图。</p>
<h3 id="类图中的关系"><a href="#类图中的关系" class="headerlink" title="类图中的关系"></a>类图中的关系</h3><h4 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h4><p>　　所谓的泛化关系（Generalization），其实就是我们平常所说的继承关系。在UML中，泛化关系用空心三角形的直线来表示，其中空心三角形一头指向父类：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_%E7%BB%A7%E6%89%BF.png" alt=""></p>
<h4 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h4><p>　　实现关系（Realization），类实现了特定的接口，重写了接口中的方法。在UML中，我们用带三角形的虚线表示这种关系，其中三角形箭头指向接口：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_%E5%AE%9E%E7%8E%B0.png" alt=""></p>
<h4 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h4><p>　　关联关系（Association），指的是一种拥有的关系，通俗一点说就是一个类“知道”另一个类的属性和方法。在UML类图中，用带箭头的实线表示这种关系，其中箭头指向被拥有者：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_st__te.png" alt=""></p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_st_co.png" alt=""></p>
<p>　　上面两幅图就分别表示多对多和1对多的关联关系，一个学生可以有多个老师，一个老师也可以有多个学生，一个学生可以修多门课程（但是课程不能拥有学生，这一点希望能对应到现实中加以理解）。这里有一点要说明，多对多关系时，可以双向都有箭头，也可以没有箭头，直接用直线连接。</p>
<p>　　此外，关联关系还有一种自相关，表示一个类的属性对象类型为这个类本身，比如数据结构里的链表（见《Java数据结构与算法》），如下图：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_sub.png" alt=""></p>
<h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><p>　　聚合关系（Aggregation），指的是整体与部分的关系，部分可以离开整体单独存在，它表示的是一种弱的拥有关系。比如停车场和汽车，雁群和大雁，汽车和轮胎（这个可能较难理解哈）等。聚合关系用带空心菱形和箭头的实线表示，其中菱形指向整体，箭头指向部分：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_park__car.png" alt=""></p>
<h4 id="合成关系"><a href="#合成关系" class="headerlink" title="合成关系"></a>合成关系</h4><p>　　合成关系（Composition），也叫做组合关系，表示的也是整体与部分的关系，但与聚合关系不同的是，它表示的是一种强的拥有关系，部分不能离开整体单独存在。比如公司和公司底下的各个部门，一个部门不能离开公司单独存在，而有了公司才会有部门。在合成关系里，整体负责部分的生命周期。在UML类图中，合成关系用带箭头和实心菱形的实线表示，其中菱形指向整体，箭头指向部分：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_com_dep.png" alt=""></p>
<h4 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h4><p>　　依赖关系（Dependency），指的是一个类的实现需要另一个类的协助，比如人要活着，就要依赖氧气，依赖水，依赖食物。在UML类图中，用带箭头的虚线表示这种关系，其中箭头指向被使用者。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_hu_wa.png" alt=""></p>
<p>　　大多数情况下，依赖关系体现在某个类的方法使用另一个类的对象作为参数，比如驾驶员（Driver类）开车（Car类），drive()方法中会将Car类型的对象car传入，然后在drive()方法中调用car的run()方法。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　我在上面阐述各种关系时尽量贴近生活去举例，方便大家理解。但是在实际读图时，可能很多时候会比单单看一种关系图来的复杂得多，但是万变不离其宗，掌握UML类图的基本知识，多看多练，举一反三，我们就能清晰地读懂类和类之间的关系，理清它们的代码表现。最后以一张《大话设计模式》的图来结束本文。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/UML_whole.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> UML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用vps和shadowsocks搭梯子]]></title>
      <url>/2017/09/30/%E7%94%A8vps%E5%92%8Cshadowsocks%E6%90%AD%E6%A2%AF%E5%AD%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/ladder.jpg" alt=""><a id="more"></a></p>
<p>　　作为一个开发者，google是必不可少的，合理使用google也是程序员的基本技能，相比bing和baidu，google无疑是更优选择，于我而言，难以退而求其次。但是由于一些原因，google服务在国内无法使用，所以就不得不通过一些方法来帮助访问google服务了。</p>
<h3 id="GoAgent"><a href="#GoAgent" class="headerlink" title="GoAgent"></a>GoAgent</h3><p>　　大学时候，因为穷的原因，所以免费是第一考虑，当时的选择是<a href="https://zh.wikipedia.org/wiki/GoAgent" target="_blank" rel="external">GoAgent</a>配合Chrome浏览器，每个月有限额的流量，用作搜索使用绰绰有余，但是速度较慢。</p>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>　　工作之后有了薪水，就选择了付费的VPN服务，速度上快了很多，但是不足的是VPN基本都是全局代理，即使是国内网站也需要绕个大圈子访问，非常不方便。只有在需要google服务的时候才会使用，所以闲置时间占比较多，经济上不是很合理划算。</p>
<h3 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h3><p>　　基于上面的考虑，后来接触到hosts文件修改方案。hosts在各个操作系统中都有，具体位置可以搜索查询。我们知道在访问网站时，需要找到它的IP地址，而IP地址又由DNS解析，将域名对应到IP上，而由于hosts的存在，在做DNS解析之前，系统会先检查本地的hosts文件中是否有地址映射关系，如果有的话就直接使用这个地址映射，而不会向DNS服务器发域名解析请求，因此修改hosts文件又成了一个新方案。通过修改hosts访问google，正常来说非常快速，而且意外地实现了分流的效果。但是，还是由于一些原因，hosts经常性地失效，每次失效都要更新一遍，比较麻烦。</p>
<h3 id="shadowsocks和vps"><a href="#shadowsocks和vps" class="headerlink" title="shadowsocks和vps"></a>shadowsocks和vps</h3><p>　　shadowsocks将socks5协议分解为客户端和服务端，两者通过ip、端口、加密方式和密码进行验证连接。服务端是代理服务器，可以帮助访问客户端无法访问到的内容。而vps是指虚拟专用服务器，是通过虚拟化技术在独立服务器中运行的专用服务器，拥有独立的公网IP地址、操作系统、硬盘空间、内存空间、CPU等，还可以安装程序、重启。shadowsocks和vps配合的步骤就是：</p>
<blockquote>
<p>1、获得自己的vps<br>2、在vps上安装服务端的shadowsocks，并设置端口、加密方式和密码<br>3、在本地安装客户端shadowsocks，填入服务端的ip，第2步中的端口、加密方式、密码<br>4、done</p>
</blockquote>
<h4 id="获得自己的vps"><a href="#获得自己的vps" class="headerlink" title="获得自己的vps"></a>获得自己的vps</h4><p>　　网上vps有很多，个人比较推荐<a href="https://www.vultr.com/?ref=7222285" target="_blank" rel="external">Vultr</a>，先注册登录，然后在Billing页面充值。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/vultr_billing.png" alt=""></p>
<p>　　我选择的visa支付，现在已经支持alipay支付宝。充值后在Servers页面生成一个Instance，点击蓝色“+”添加。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/vultr_servers.png" alt=""></p>
<p>　　然后选择你的站点和服务器配置，站点随意，Server Type推荐CentOS，Server Size看需求，一般5刀够用，下面的默认，点击“Deploy Now”部署。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/vultr_deploy.png" alt=""></p>
<p>　　然后会看到服务器在“Installing”中，等待一段时间，直到处于Running状态。</p>
<h4 id="安装服务端shadowsocks"><a href="#安装服务端shadowsocks" class="headerlink" title="安装服务端shadowsocks"></a>安装服务端shadowsocks</h4><p>　　要在服务端安装shadowsocks，首先要通过ssh连接到vps，我自己使用的是Xshell，输入ip、端口、用户名和密码，接下来就是linux系统的操作体验了。分别输入下面三行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x shadowsocks.sh</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</div></pre></td></tr></table></figure>
<p>　　输入最后一行后会让你输入密码和端口，仔细看提示操作就行，然后静静地等待其安装完毕。最后你会看到红色底色的IP、端口、密码和加密方式信息。到此第2步接近完成，之所以说接近完成，是因为还需要在服务器上进行速度优化，使得连接速度更为感人。这里推荐两个方案，都是单边优化，只需要在服务端操作就行。</p>
<h5 id="TCP-BBR拥塞控制算法"><a href="#TCP-BBR拥塞控制算法" class="headerlink" title="TCP BBR拥塞控制算法"></a>TCP BBR拥塞控制算法</h5><p>　　TCP BBR是Google开源的拥塞控制算法，类似锐速的单边加速工具。还是用Xshell（或者其他工具）连接到VPS，依次输入下面三行命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x bbr.sh</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bbr.sh</div></pre></td></tr></table></figure>
<p>　　安装完成后会提示重启VPS，之后重新连接，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsmod | grep bbr</div></pre></td></tr></table></figure></p>
<p>　　如果返回值有tcp_bbr模块则表示成功。</p>
<h5 id="锐速"><a href="#锐速" class="headerlink" title="锐速"></a>锐速</h5><p>　　锐速也是一个单边加速方案，在VPS终端输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</div></pre></td></tr></table></figure></p>
<p>　　耐心等待其安装完毕，按提示操作，然后输入下面命令，打开配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nano /serverspeeder/etc/config</div></pre></td></tr></table></figure></p>
<p>　　将advinacc的值由0改为1，然后ctrl+x退出，再输入y并回车确认退出。如果安装后提示需要更换内核，则需要更换内核，可以输入下面两行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://blog.asuhu.com/sh/ruisu.sh</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash ruisu.sh</div></pre></td></tr></table></figure>
<p>　　之后VPS会重启，重新连接到VPS，输入下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; chmod +x appex.sh &amp;&amp; bash appex.sh install</div></pre></td></tr></table></figure></p>
<p>　　安装完毕后输入下面命令检测是否启用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsmod | grep appex</div></pre></td></tr></table></figure></p>
<h4 id="安装客户端shadowsocks"><a href="#安装客户端shadowsocks" class="headerlink" title="安装客户端shadowsocks"></a>安装客户端shadowsocks</h4><p>　　可以在GitHub上获取<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="external">shadowsocks</a>最新版本，点击shadowsocks.exe，输入服务器地址、端口、shadowsocks密码和加密方式，代理端口可以保持1080。此时基本设置完毕，如果平时使用Chrome的话，可以下载SwitchyOmega扩展进行代理设置。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/switchyomega.png" alt=""></p>
<p>　　如图这样设置就行，然后在auto switch里配置需要使用proxy情景的网站域名，实现分流。最后打开shadowsocks客户端，点击“启用系统代理”。</p>
<h4 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h4><p>　　shadowsocks使用PAC（代理自动配置），可以自己设置本地PAC，比如SwitchyOmega那样，也可以使用在线PAC，以后慢慢研究。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>　　最后，推荐一下IOS端的sugre，非常贵，非常好用！</p>
]]></content>
      
        <categories>
            
            <category> 科学上网 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vps </tag>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA “No-executable-code-found-at-line”错误]]></title>
      <url>/2017/09/26/IDEA%E2%80%9CNo-executable-code-found-at-line%E2%80%9D%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://s3.amazonaws.com/rails-camp-tutorials/blog/best-ways-debug-ruby-on-rails-application/debugging.jpg" alt=""><a id="more"></a><br>　　今天碰到一个问题，发现在进行数据库查询时，将传入的多个参数放入Map中传递后，控制台竟然报参数无法找到。于是debug了一下，在Map中放参数的那行代码打了断点：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/getSms%E6%96%B9%E6%B3%95.png" alt=""><br>　　发现程序总是无法进入断点，再次查看控制台报错信息，发现错误在@Override这行。于是将断点打在此行，再次debug后发现没有进入方法，并且原来在Map中放参数的那行代码处的断点报错：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/no_executable_code_found_at_line.png" alt=""><br>　　（上图为网络图）“No executable code found at line”错误，没有可执行的代码。回忆了一下，想起来之前这个服务是在另一个包里的，后来单独提出来开了一个新包。也许是编译问题呢？于是到对应包下mvn compile了下，问题解决！方法正常执行了。　　</p>
]]></content>
      
        <categories>
            
            <category> IDEA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用shiro实现不同角色的对应显示]]></title>
      <url>/2017/08/29/%E7%94%A8shiro%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%90%8C%E8%A7%92%E8%89%B2%E7%9A%84%E5%AF%B9%E5%BA%94%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　<img src="http://orujzh93n.bkt.clouddn.com/Apache_Shiro_Logo.png" alt="shiro"><br>　　最近在用shiro做后台的权限控制，作为Apache的开源项目，shiro的学习资料很多，我在看的除了官网文档外，还有《跟我学Shiro》，作者是京东的张开涛，我觉得非常不错，推荐给大家。<a id="more"></a>之前碰到的问题都是一个页面仅限一个角色显示，比如一个只针对ROOT角色的页面，ADMIN角色的用户是无法浏览的。像这种问题只要在映射方法上加上如下的注解即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequireRoles</span>(<span class="string">"ROOT"</span>)</div></pre></td></tr></table></figure>
<p>　　之后在前台文件中需要权限控制的tag加入下面的代码（我用的模板引擎是thymeleaf，号称新一代的轻量级模板，用了一段时间后感觉比freemarker有过之而无不及）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shiro:hasRole="ROOT"</div></pre></td></tr></table></figure></p>
<p>　　上面这种权限控制针对的情况比较简单，如果出现这样一种页面，它显示一些数据，其中ROOT角色作为超级管理员可以浏览所有数据，但是ADMIN只能浏览自己添加的那部分内容（多个用户拥有ADMIN角色，他们可以添加各自的内容），那又该如何设置注解呢？对于这种情况，我们只需要在原来的基础上添加一个ADMIN角色，同时指定ROOT和ADMIN角色的逻辑关系即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequireRoles</span>(value=&#123;<span class="string">"ROOT"</span>,<span class="string">"ADMIN"</span>&#125;,logical=Logical.OR)</div></pre></td></tr></table></figure></p>
<p>　　“value”后的花括号内可以添加多个角色，它们之间的关系是“OR”或关系，如果不添加logical部分，则shiro默认ROOT和ADMIN之间是和关系，即既是ROOT又是ADMIN。然后在映射方法内进行逻辑判断，针对角色返回对应的数据。那么在前台文件里又该如何设置呢？此时仍然采用shiro:hasRole是不行的，因为它只指定一个角色，在shiro的官网中有针对hasRole这个tag的例子和说明（<a href="https://shiro.apache.org/web.html#Web-The%7B%7BhasRole%7D%7Dtag" target="_blank" rel="external">点这里</a>）。对于这种多个角色或关系的，我们可以使用<a href="https://shiro.apache.org/web.html#Web-The%7B%7BhasAnyRole%7D%7Dtag" target="_blank" rel="external">shiro:hasAnyRole</a>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shiro:hasAnyRole="ROOT,ADMIN"</div></pre></td></tr></table></figure></p>
<p>　　这里只是针对shiro的一个小小的知识点说明，作为权限控制框架，shiro考虑得非常全面，几乎覆盖了你能想到的任何情况。而且上手快，学习成本低，粗细粒度自由控制，非常方便。正如shiro自己所说的，Security can be very complex at times，even painful，but it doesn’t have to be。</p>
]]></content>
      
        <categories>
            
            <category> shiro </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shiro </tag>
            
            <tag> thymeleaf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DWZ-jui局部刷新分页的即时刷新问题]]></title>
      <url>/2017/08/18/DWZ-jui%E5%B1%80%E9%83%A8%E5%88%B7%E6%96%B0%E5%88%86%E9%A1%B5%E7%9A%84%E5%8D%B3%E6%97%B6%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　<img src="http://orujzh93n.bkt.clouddn.com/%E5%81%9A%E4%BA%BA%E8%A6%81%E9%9D%A0%E8%87%AA%E5%B7%B1.jpg" alt=""><a id="more"></a></p>
<h3 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h3><p>　　这两天一直在做后台，用的是<a href="http://jui.org/#main.html" target="_blank" rel="external">dwz富客户端框架</a>，这个框架上手比较简单，文档也就30多页，官网上也有demo页面。官方说只要做html扩展就可以了，js和ajax之类的操作基本都制定好了，但是实际开发的过程中发现还是有些问题的，基于体验的问题，感觉还是需要自己做一些自定义。比如在对局部刷新分页做新增修改和删除时，源代码无法做到即时刷新页面数据。<br>　　<img src="http://orujzh93n.bkt.clouddn.com/%E6%96%B0%E5%A2%9E%E5%92%8C%E4%BF%AE%E6%94%B9%E6%8C%89%E9%92%AE.png" alt=""><br>　　比如，点击上图中的新增配置和修改配置时，新增或者修改成功后，页面数据并不会即时刷新，体验非常差，于是我打算自己做一些自定义，实现即时刷新。在google上搜索了一些办法，基本没有几个说的让人满意的（也有可能是我的搜索能力问题）。于是自己看源码研究，尝试自己改进这个问题。</p>
<h3 id="研究源码"><a href="#研究源码" class="headerlink" title="研究源码"></a>研究源码</h3><p>　　发现在源码中，表单form在提交后，会对应到action指定的映射进行处理，然后后台返回json数据，onsubmit对应的函数对返回的json数据进行处理，做出相应的动作，这是一个很常见的逻辑。<br>　　<img src="http://orujzh93n.bkt.clouddn.com/%E5%8E%9F%E5%85%88%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0dialogAjaxDone.png" alt=""><br>　　可以看到，源码中对应的处理函数是dialogAjaxDone，点进去看看具体是怎么个逻辑。<br>　　<img src="http://orujzh93n.bkt.clouddn.com/dialogAjaxDone%E5%87%BD%E6%95%B0.png" alt=""><br>　　可以看到，源码中其实一直都是针对navTab进行操作的，并不适用于局部刷新分页，所以应该要自定义一个函数来处理局部刷新分页新增和修改的ajax操作。再回到页面，发现其中一个html文件中对应一个id为jbsxBox（jbsx为局部刷新的拼音首字母）的div，其实这就是页面最右侧的部分，在另一个html文件中对应一个rel为jbsxBox的div，数据回填后呈现在id为jbsxBox的div部分。<br>　　<img src="http://orujzh93n.bkt.clouddn.com/jbsxBox%E7%9A%84id.png" alt="">　　<br>　　<img src="http://orujzh93n.bkt.clouddn.com/rel%E4%B8%BAjbsxBox%E7%9A%84table%E6%95%B0%E6%8D%AE.png" alt=""></p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数　　"></a>自定义函数　　</h3><p>　　所以可以将onsubmit对应的回调函数进行自定义，我把这个函数上提到dwz.util.js中。<br>　　<img src="http://orujzh93n.bkt.clouddn.com/onsubmit%E6%9B%B4%E6%94%B9%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.png" alt=""><br>　　函数内容为：<br>　　<img src="http://orujzh93n.bkt.clouddn.com/%E5%B0%86%E5%87%BD%E6%95%B0%E4%B8%8A%E6%8F%90%E5%88%B0dwz.util.js%E6%96%87%E4%BB%B6.png" alt=""><br>　　从后台返回jbsxBox的navTabId和页面forwardUrl，对其进行异步刷新。同时注意更新index.html页面中引入的dwz.util.js版本。</p>
<h3 id="删除操作的ajax处理"><a href="#删除操作的ajax处理" class="headerlink" title="删除操作的ajax处理"></a>删除操作的ajax处理</h3><p>　　上面说的是针对target为dialog的ajax处理，对于像target为ajaxTodo的操作，又该如何处理呢？查看dwz.ajax.js文件，可以发现，对于ajaxTodo类型的操作，它会去找删除操作中&lt;a&gt;的callback属性，callback定义一个回调函数，如果没有这个属性的话，默认去执行navTabAjaxDone。所以我们需要自定义一个callback，由于删除操作只做一次，所以回调函数就直接写在页面里了。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;![CDATA[</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteAjaxCallback</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">    DWZ.ajaxDone(json);</div><div class="line">    <span class="keyword">if</span> (json[DWZ.keys.statusCode] == DWZ.statusCode.ok)&#123;</div><div class="line">        <span class="keyword">if</span>(json.navTabId &amp;&amp; json.forwardUrl) &#123;</div><div class="line">            $(<span class="string">"#"</span>+json.navTabId).ajaxUrl(&#123;<span class="attr">url</span>:json.forwardUrl&#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">]]&gt;</div></pre></td></tr></table></figure></p>
<p>　　这里的&lt;![CDATA[和]]&gt;不能省略，否则会报语法错误，因为&amp;符号会被解析器当作新元素的开始。</p>
]]></content>
      
        <categories>
            
            <category> dwz </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
            <tag> dwz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个dubbo注解的坑]]></title>
      <url>/2017/08/07/%E4%B8%80%E4%B8%AAdubbo%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/%E5%9D%91.jpg" alt=""><a id="more"></a><br>　　最近这段时间一直在忙项目，菜鸟经验不足，所以必须多花时间啦。言归正传，说到dubbo服务（英文发音为|ˈdʌbəʊ|），它是阿里巴巴开发的一个分布式服务框架，用于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。dubbo确实帮助开发者提高了开发效率，但是在这之前，该踩的坑还是得踩。之前学dubbo时，尝试自己编译，中间折腾了很久，比如依赖版本号之类的问题，让人很是无语，还好后来解决了，也做了总结。今天又碰到了dubbo方面的问题，但是严格来说，似乎应该算作个人的坏习惯。</p>
<h3 id="dubbo报Forbid-consumer错误"><a href="#dubbo报Forbid-consumer错误" class="headerlink" title="dubbo报Forbid consumer错误"></a>dubbo报Forbid consumer错误</h3><p>　　在测试过程中出现“Forbid consumer xxx.xxx.xxx.xxx access service……Please check registry access list (whitelist/blacklist)”这样的错误，相信使用过dubbo的人对这个报错应该非常熟悉。根据以往的经验，出现这个错误，和黑白名单没啥关系，因为我的服务注册地址在本地，而我没有配置过黑白名单。出现这个报错，大多数情况是服务没有注册，没有provider，这里有一篇文章是写这个的，<a href="http://blog.sina.com.cn/s/blog_4adc4b090102x12u.html" target="_blank" rel="external">去看看</a> 。所以在遇到这个错误时，我第一时间查看了dubbo配置，看服务注册和调用是否配置正确，发现并没有问题。因为是和spring boot整合使用的，所以之后又检查了服务的注解，看是不是哪里落了注解没加，可是依然一无所获。被dubbo伤的很深，炎热的天气里，我的心拔凉拔凉的。</p>
<h3 id="确实是注解出了问题"><a href="#确实是注解出了问题" class="headerlink" title="确实是注解出了问题"></a>确实是注解出了问题</h3><p>　　所谓“山重水复疑无路，柳暗花明又一村”，每当我陷入bug不可自拔时，都会去放点水让脑子清醒点。这次也不例外，在解决的过程中，我想到貌似只有注解能出问题了，加了注解不代表加对了注解，毕竟IDE工具很方便，自动就加上了。回去一看发现果然不出所料，服务上加的@Service注解是spring家的，而我需要的是dubbo家的。<br>　　把下面的注解换掉：<br>　　<br><img src="http://orujzh93n.bkt.clouddn.com/spring%E7%9A%84Service%E6%B3%A8%E8%A7%A3.png" alt=""></p>
<p>　　换成dubbo的@Service注解。<br>　　<br><img src="http://orujzh93n.bkt.clouddn.com/dubbo%E7%9A%84Service%E6%B3%A8%E8%A7%A3.png" alt=""></p>
<p>　　再次启动，查看启动日志，发现服务已经注册，测试也没有报错产生。</p>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>　　这件事情也提醒我开发过程中的习惯养成问题，现在各种IDE工具非常智能实用，也确确实实帮助我提高了开发效率，但是自动提示只是自动提示，过程当中还是需要多留意多注意。记一笔，算是一个小小的教训吧。</p>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dubbo </tag>
            
            <tag> spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何在maven仓库上传本地jar包]]></title>
      <url>/2017/07/26/%E5%A6%82%E4%BD%95%E5%9C%A8maven%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　之前在“maven依赖无法下载”里提到将maven依赖安装到本地maven仓库的方法，虽然解决了自己的问题，但对于一个开发团队来说，这种解决方案无疑是于事无补的。因为团队其他成员在更新代码后，会发现依赖无法下载，因为中央仓库里根本没有这个依赖（这里的中央仓库指的是公司服务器上的maven仓库）。所以仅仅把依赖jar包安装到本地仓库并不能彻底解决问题，而是需要把jar包上传到中央仓库（即settings.xml文件中指定的仓库地址）才行。<a id="more"></a>那么该如何把jar包上传到中央仓库呢？</p>
<h3 id="登录中央仓库"><a href="#登录中央仓库" class="headerlink" title="登录中央仓库"></a>登录中央仓库</h3><p>　　首先在浏览器中打开中央仓库的url地址，可以看到下面的页面：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%89%93%E5%BC%80%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.png" alt=""><br>　　点击红色箭头处“Log In”登录管理员账户，然后在页面左侧箭头所指处选择“Repositories”：<br>　　<br><img src="http://orujzh93n.bkt.clouddn.com/%E9%80%89%E6%8B%A9repositories.png" alt=""></p>
<h3 id="选择上传方式"><a href="#选择上传方式" class="headerlink" title="选择上传方式　　"></a>选择上传方式　　</h3><p>　　点击3rd party<br>　　<br><img src="http://orujzh93n.bkt.clouddn.com/%E9%80%89%E6%8B%A93rd_party.png" alt=""><br>　　然后选择“Artifact Upload”<br>　　<br><img src="http://orujzh93n.bkt.clouddn.com/%E7%82%B9%E5%87%BBupload.png" alt=""><br>　　如图选择GAV Parameters</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E9%80%89%E6%8B%A9GAV_Parameters.png" alt=""></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖　　"></a>添加依赖　　</h3><p>　　之后按照下图所示的数字顺序依次输入依赖坐标，选择需要上传的依赖jar包，点击Add Artifact，最后点击Upload Artifact(s)。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96jar%E6%AD%A5%E9%AA%A4.png" alt=""><br>　　到此为止就完成了依赖的上传，这时候团队其他成员在pom文件内配置好对应依赖的坐标后，即可将依赖下载到本地仓库中。</p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一次ajax请求，两次提交]]></title>
      <url>/2017/07/21/%E4%B8%80%E6%AC%A1ajax%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%B8%A4%E6%AC%A1%E6%8F%90%E4%BA%A4/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　最近一直在忙公司的web项目的开发，碰到一个比较有趣的问题，这个问题不太容易发现（老鸟们请忽视）。</p>
<h3 id="点击提交，执行两次请求"><a href="#点击提交，执行两次请求" class="headerlink" title="点击提交，执行两次请求"></a>点击提交，执行两次请求</h3><p>　　我在使用ajax进行表单的提交时，发现后台执行成功，但前台总是不执行success的回调函数，而是执行error的回调函数，检查了n遍，依旧发现不了问题。后来抓包发现，在点击表单的提交按钮后，先后执行了ajax的post请求，以及一次不知哪里冒出来的get请求。<a id="more"></a>看来问题似乎并不在ajax上，而是出在了html的提交按钮上。</p>
<h3 id="button的type问题"><a href="#button的type问题" class="headerlink" title="button的type问题"></a>button的type问题</h3><p>　　检查了下前端的button按钮，发现代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"login-btn"</span> <span class="attr">id</span>=<span class="string">"s-submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　看了下w3school关于HTML&lt;button&gt;标签的<a href="http://www.w3school.com.cn/tags/att_button_type.asp" target="_blank" rel="external">介绍</a>，里面有句话是这么说的：</p>
<blockquote>
<p>type 属性规定按钮的类型。<br>提示：请始终为按钮规定 type 属性。Internet Explorer 的默认类型是 “button”，而其他浏览器中（包括 W3C 规范）的默认值是 “submit”。</p>
</blockquote>
<p>　　还有如下所示的一张表：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/button%E7%9A%84type%E5%B1%9E%E6%80%A7.png" alt=""></p>
<p>　　我在测试时一直都是用的chrome，所以此时button的默认type属性为submit，所以每次执行完ajax的post请求后，submit默认又把表单提交了一遍，因而出现了开头我说的问题。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>　　于是我把提交按钮的type属性设置为button：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"login-btn"</span> <span class="attr">id</span>=<span class="string">"s-submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　再次测试后发现ajax能正确执行success的回调函数了。除此之外，保持type=submit的情况下，在提交按钮的click()函数最后一行加上return false，也可以保证ajax的success回调函数正确执行，因为此时阻止了submit的默认行为。</p>
]]></content>
      
        <categories>
            
            <category> ajax </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax，html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新学期]]></title>
      <url>/2017/07/17/%E6%96%B0%E5%AD%A6%E6%9C%9F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: false,
				showlrc: 0,
				music: {
					title: "One & Only",
					author: "Adele",
					url: "http://113.215.21.32/1Q2W3E4R5T6Y7U8I9O0P1Z2X3C4V5B/orujzh93n.bkt.clouddn.com/Adele%20-%20One%20&%20Only.mp3",
					pic: "http://orujzh93n.bkt.clouddn.com/One&Only.jpg",
				}
			});
		</script>
<p>　　过去的这一个学年里，我们表现地还挺不错的，虽然有很多次考试都不怎么样，有些时间学习也不够努力，但终究还是顺利完成了这一年的学习。我觉得我们越来越进入学习的状态了，希望我们以后能越来越好，成为大家眼中的模范生，各自取得自己想要的成绩。<br>　　希望未来的日子里，汝果一直在。王同学，新的学年里一起加油吧！明年可是要升学咯！<a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 杂感 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[maven依赖无法下载]]></title>
      <url>/2017/07/07/maven%E4%BE%9D%E8%B5%96%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>　　最近两天和IDEA杠上了，今天在项目的pom文件里添加依赖坐标后，发现不能自动下载依赖，或者说依赖下载不成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.aliyun&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;aliyun-java-sdk-dysmsapi&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="maven依赖下载失败"><a href="#maven依赖下载失败" class="headerlink" title="maven依赖下载失败"></a>maven依赖下载失败</h3><p>　　像上面这样添加了正确的依赖后，发现在“External Libraries”里并没有对应的jar包显示。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%B2%A1%E6%9C%89%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F.png" alt=""></p>
<p>　　按照网上千篇一律的指导，说是需要删除本地maven仓库内下载失败的文件，即以.lastUpdated结尾的文件，但是照做之后重新执行，发现依赖仍然不能成功下载下来。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%9C%AC%E5%9C%B0maven%E4%BB%93%E5%BA%93%E6%B2%A1%E6%9C%89%E4%B8%8B%E8%BD%BD%E6%88%90%E5%8A%9F.png" alt=""></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>　　于是采用了最笨最简单的方法，就是下载官方jar包到本地，然后手动添加，Ctrl+Shift+Alt+s后进入项目结构设置，点击下图箭头所指的位置添加jar包。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0jar%E5%8C%85.png" alt=""></p>
<p>　　但是作为一名严重强迫症患者，这种情况是难以接受的，而且我在写代码的过程中也发现，通过这种方式导包，IDEA会出现一些莫名其妙的报错，比如报方法参数有误，而实际上并没有问题。既然是想通过maven的方式管理依赖，何不把jar包安装到本地的maven仓库呢？这样也就能实现和maven自动下载依赖一样的效果了。下面就说说怎么把下载的jar包转变为maven自动下载后的样子。<br>　　打开对应项目的终端，即Terminal窗口，以我自己的情况为例，输入下面代码。<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install:install-file -Dfile=C:\Users\Administrator\Desktop\aliapi\aliyun-java-sdk-dysmsapi-<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>-SNAPSHOT.jar -DgroupId=com.aliyun -DartifactId=aliyun-java-sdk-dysmsapi -Dversion=<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>-SNAPSHOT -Dpackaging=jar</div></pre></td></tr></table></figure></p>
<p>　　当然，不同的情况，-Dfile、-DgroupId、-DartifactId、-Dversion、-Dpackaging都不一样。<br>　　可以看到安装成功：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/mvn%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt=""></p>
<p>　　这个时候就可以看到在“External Libraries”里多了一行：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/mavenjar%E5%8C%85%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F.png" alt=""></p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><p>　　虽然问题貌似解决了，但是maven依然不能成功自动下载对应依赖，这个问题留待研究，后续补上。</p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDEA中添加依赖时自动提示]]></title>
      <url>/2017/07/06/IDEA%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E6%97%B6%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://orujzh93n.bkt.clouddn.com/%E7%A8%8B%E5%BA%8F%E7%8C%BF.jpg" alt=""><a id="more"></a></p>
<p>　　很多开发者们总是自嘲程序猿，然而虽然称呼为“猿”，但我们的工作却非常要求效率的，如果能在每个步骤上节约时间，小河汇大江，加起来应该也能提早点下班吧。言归正传，由于公司要求，从eclipse转IDEA有一段时间了，IDEA的界面非常极客，尤其是配上Darcula主题，其他的各种提示也非常人性化，大大提高了工作效率。但这两天因为开发新项目，转到楼下工作，配了新电脑，写代码时发现在加pom依赖时不会自动提示了，所以每次都得自己敲依赖坐标，非常痛苦。其实解决这个问题非常简单，现在我就来说一说具体步骤。</p>
<h3 id="无法自动提示并填写依赖坐标"><a href="#无法自动提示并填写依赖坐标" class="headerlink" title="无法自动提示并填写依赖坐标"></a>无法自动提示并填写依赖坐标</h3><p>　　比如我想输入aliyun-java-sdk-core.jar的依赖坐标，当我像下面这样在pom文件里输入时，发现IDEA并没有给出任何提示，很奇怪，以前不是这样的。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E6%8F%90%E7%A4%BA.png" alt=""></p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>　　经过一番探索研究，终于理清楚了这其中的原因。原来IDEA在你输入某一项依赖的坐标时，可以根据你本地以及远程maven仓库内已经下载好的依赖，给出相应的提示。如果你之前从来没有添加过某个依赖，那么第一次输入时还是需要自己手敲坐标的，但是因为各个项目间的依赖其实差的并不是很大，所以只要能设置自动提示，手动添加坐标的情况还是很少见的。</p>
<h3 id="设置为可以自动提示"><a href="#设置为可以自动提示" class="headerlink" title="设置为可以自动提示"></a>设置为可以自动提示</h3><p>　　那么该怎么设置呢？可以按照下面的步骤，进入到Repositories的设置中。</p>
<blockquote>
<p>File &gt;&gt; Settings &gt;&gt; Build,Execution,Deployment &gt;&gt; Build Tools &gt;&gt; Maven &gt;&gt; Repositories</p>
</blockquote>
<p>　　可以看到如图所示的设置：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/Settings%E8%AE%BE%E7%BD%AEmaven%E4%BB%93%E5%BA%93.png" alt=""></p>
<p>　　依次选中本地和远程的maven仓库地址，点击右侧的Update按钮，进行更新。</p>
<h3 id="实现自动提示"><a href="#实现自动提示" class="headerlink" title="实现自动提示"></a>实现自动提示</h3><p>　　设置完毕后，重新在pom文件内输入aliyun-java-sdk-core.jar的依赖坐标，发现这个时候IDEA会给出提示，其中就有我需要的选项，可爱的IDEA又回来了。当然，这里的前提是我之前下载过这个依赖。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/idea%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E6%9C%89%E6%8F%90%E7%A4%BA%E4%BA%86.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[show engines没有InnoDB]]></title>
      <url>/2017/06/28/%E8%A7%A3%E5%86%B3%E2%80%9Cshow%20engines%E2%80%9D%E6%B2%A1%E6%9C%89InnoDB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="sql语句里设置的ENGINE没有生效"><a href="#sql语句里设置的ENGINE没有生效" class="headerlink" title="sql语句里设置的ENGINE没有生效"></a>sql语句里设置的ENGINE没有生效</h3><p>　　今天在Navicat上建表时发现一个问题，sql语句中设置ENGINE=InnoDB，但是在Navicat上执行后发现ENGINE=MyISAM。<a id="more"></a>sql语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_bankcard`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`userid`</span> <span class="built_in">bigint</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</div><div class="line">  <span class="string">`bank`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'银行'</span>,</div><div class="line">  <span class="string">`deposit`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'开户行分支'</span>,</div><div class="line">  <span class="string">`card`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'银行卡号'</span>,</div><div class="line">  <span class="string">`bankcode`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'银行卡编码'</span>,</div><div class="line">  <span class="string">`state`</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'0-可用 1-不可用'</span>,</div><div class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'添加时间'</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'真实姓名'</span>,</div><div class="line">  <span class="string">`idno`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'身份证号'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> (<span class="string">`userid`</span>,<span class="string">`card`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'用户银行卡信息表'</span>;</div></pre></td></tr></table></figure></p>
<p>　　Navicat上DDL显示如下：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/engine%E4%B8%8D%E4%B8%80%E6%A0%B7.png" alt=""></p>
<h3 id="mysql里没有InnoDB"><a href="#mysql里没有InnoDB" class="headerlink" title="mysql里没有InnoDB"></a>mysql里没有InnoDB</h3><p>　　为什么sql语句和DDL显示不一样呢？难道mysql不支持InnoDB吗？于是在dos里证实了一下。<br>　　输入：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show engines;</div></pre></td></tr></table></figure></p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%B2%A1%E6%9C%89innodb.png" alt=""></p>
<p>　　发现并没有InnoDB，这是怎么回事呢？这个时候就应该去看日志了，根据日志记录看看运行过程中发生了什么问题，竟然没有InnoDB。我在mysql安装目录的data文件夹内发现有一个.err文件，嗯，一看后缀就知道是错误记录的文件，打开后观察了下，确实有报错。</p>
<h3 id="查看-err日志文件"><a href="#查看-err日志文件" class="headerlink" title="查看.err日志文件"></a>查看.err日志文件</h3><p><img src="http://orujzh93n.bkt.clouddn.com/%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%991.png" alt=""></p>
<p>　　这里说配置文件内的日志大小设置与实际生成的日志大小不一致，在我的本地配置文件my.ini中日志文件的大小设置是innodb_log_file_size = 120M，根据日志报错实际应该设置成5M，于是我重新设置日志大小，并把所有ib_logfile文件删除，重新启动mysql，再次查看.err日志文件。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%992.png" alt=""></p>
<p>　　发现新生成的日志文件都是5M的了，但是第二个红框还是有日志方面的错误，说“data files are corrupt ”，那就再重启一次mysql吧。</p>
<h3 id="官方解决方案"><a href="#官方解决方案" class="headerlink" title="官方解决方案"></a>官方解决方案</h3><p><img src="http://orujzh93n.bkt.clouddn.com/%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%993_%E7%BB%99%E5%87%BA%E9%93%BE%E6%8E%A5.png" alt=""></p>
<p>　　发现系统温馨地给出说明和疑似解决问题的链接了，哎，似乎是被mysql鄙视了。于是点开箭头所指的链接<a href="https://dev.mysql.com/doc/refman/5.5/en/error-creating-innodb.html" target="_blank" rel="external">(在这儿)</a>，打开mysql官方给出的解决方案。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E5%AE%98%E6%96%B9%E5%A4%84%E7%90%86.png" alt=""></p>
<p>　　官方建议我把ibdata和ib_logfile全部删除，嗯那就照着官方的指示来试试吧。删除后重新启动mysql，发现.err里没有报错信息了，进入mysql查看一下engines。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p><img src="http://orujzh93n.bkt.clouddn.com/%E6%9C%89innodb%E4%BA%86.png" alt=""></p>
<p>　　InnoDB回来啦！再次在Navicat里执行一遍同样的sql。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/innodb%E5%BB%BA%E8%A1%A8%E6%88%90%E5%8A%9F.png" alt=""></p>
<p>　　发现ENGINE=InnoDB，成功！</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决“The server quit without updating PID file”报错]]></title>
      <url>/2017/06/26/%E8%A7%A3%E5%86%B3%E2%80%9CThe%20server%20quit%20without%20updating%20PID%20file%E2%80%9D%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h3><p>　　今天在mac终端上登录之前用homebrew安装的mysql时报错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ mysql -uroot -p</div><div class="line">Enter password:</div><div class="line">ERROR 2002 (HY000):Can<span class="string">'t connect to local MySQL server through socket '</span>/tmp/mysql.sock<span class="string">' (2)</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　　第一时间觉得应该是mysql没有启动吧，查看一下进程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ ps aux | grep mysqld</div><div class="line">henease       77714    0.0    0.0   2432804    852    s000    S+     12:01上午      0:00.00  grep mysqld</div></pre></td></tr></table></figure></p>
<p>　　果然没有启动，于是启动mysql。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ mysql.server start</div><div class="line">Starting MySQL</div><div class="line">./usr/<span class="built_in">local</span>/Cellar/mysql/5.7.16/bin/mysqld_safe: line 135: /usr/<span class="built_in">local</span>/var/mysql/henease.local.err: Permission denied</div><div class="line">/usr/<span class="built_in">local</span>/Cellar/mysql/5.7.16/bin/mysqld_safe: line 169: /usr/<span class="built_in">local</span>/var/mysql/henease.local.err: Permisson denied</div><div class="line"> ERROR! The server quit without updating PID file (/usr/<span class="built_in">local</span>/var/mysql/henease.local.pid).</div></pre></td></tr></table></figure></p>
<h3 id="存在权限问题"><a href="#存在权限问题" class="headerlink" title="存在权限问题"></a>存在权限问题</h3><p>　　发现报“The server quit without updating PID file”错误。根据“Permission denied”推测可能是访问权限的问题，于是看看对应文件夹都有些啥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/var/mysql/</div><div class="line">bash-3.2$ ls</div><div class="line">auto.cnf           henease.local.err   mysql               server-key.pem     </div><div class="line">ca-key.pem         ib_buffer_pool      performance_schema  sys</div><div class="line">ca.pem             ib_logfile0         private_key.pem     </div><div class="line">client-cert.pem    ib_logfile1         public_key.pem      </div><div class="line">client-key.pem     ibdata1             server-cert.pem</div></pre></td></tr></table></figure></p>
<p>　　嗯，有很多，包括那个报错“Permission denied”的henease.local.err文件。再看一下每个文件的拥有者信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ ls -laF /usr/<span class="built_in">local</span>/var/mysql/</div><div class="line">total 357144</div><div class="line">drwxr-xr-x   19  henease   admin       646    6      24   23:58   ./</div><div class="line">drwxrwxr-x   10  henease   admin       340    6      24   21:10   ../</div><div class="line">-rw-r-----    1  henease   admin        56   12       1    2016   auto.cnf</div><div class="line">-rw-------    1  henease   admin      1676   12       1    2016   ca-key.pem</div><div class="line">-rw-r--r--    1  henease   admin      1075   12       1    2016   ca.pem</div><div class="line">-rw-r--r--    1  henease   admin      1079   12       1    2016   client-cert.pem</div><div class="line">-rw-------    1  henease   admin      1676   12       1    2016   client-key.pem</div><div class="line">-rw-r-----    1  _mysql    admin   2459473    6      24   22:47   henease.local.err</div><div class="line">-rw-r-----    1  henease   admin       478    6      24   23:40   ib_buffer_pool</div><div class="line">-rw-r-----    1  henease   admin  50331648    6      24   23:40   ib_logfile0</div><div class="line">-rw-r-----    1  henease   admin  50331648   12       1    2016   ib_logfile1</div><div class="line">-rw-r-----    1  henease   admin  79691776    6      24   23:40   ibdata1</div><div class="line">drwxr-x---   77  henease   admin      2618   12       1    2016   mysql/</div><div class="line">drwxr-x---   90  henease   admin      3060   12       1    2016   performance_schema/</div><div class="line">-rw-------    1  henease   admin      1676   12       1    2016   private_key.pem</div><div class="line">-rw-r--r--    1  henease   admin       452   12       1    2016   public_key.pem</div><div class="line">-rw-r--r--    1  henease   admin      1079   12       1    2016   server-cert.pem</div><div class="line">-rw-------    1  henease   admin      1680   12       1    2016   server-key.pem</div><div class="line">drwxr-x---  108  henease   admin      3672   12       1    2016   sys/</div></pre></td></tr></table></figure></p>
<h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>　　发现henease.local.err的拥有者不一样，其他的都是henease，只有它是_mysql，所以此时应该有两条路可走</p>
<blockquote>
<ul>
<li>更改henease.local.err的拥有者</li>
<li>根据henease.local.err的文件信息，删除掉应该不会有什么影响，所以尝试先在/tmp内备份一份后删除它</li>
</ul>
</blockquote>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p>　　我尝试了第二种方式，之后再次启动mysql。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ mysql.server start</div><div class="line">Starting MySQL</div><div class="line"> SUCCESS！</div></pre></td></tr></table></figure></p>
<p>　　启动成功了！进入mysql看看。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ mysql -uroot -p</div><div class="line">Enter password:</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 2</div><div class="line">Server version: 5.7.16 Homebrew</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>　　可以了，一切正常。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>　　出现错误的时候，照着错误提示信息一步步处理应该问题不大，当然在Stack Overflow上也有类似的问题，比如<br><a href="https://stackoverflow.com/questions/4963171/mysql-server-startup-error-the-server-quit-without-updating-pid-file" target="_blank" rel="external">mysql-server-startup-error-the-server-quit-without-updating-pid-file</a>，里面有一个答案的处理方式和我一样，可以作为参考。</p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决cannot load JDBC driver class '${jdbc.driverClassName}'报错]]></title>
      <url>/2017/06/20/%E8%A7%A3%E5%86%B3cannot%20load%20JDBC%20driver%20class%20'$%7Bjdbc.driverClassName%7D'%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>　　今天学习了WebMagic爬虫框架，然后就蠢蠢欲动，写了个豆瓣爬虫，根据评分爬取图书，并持久化到MySQL数据库的程序。但是很不幸的是在最后单元测试的时候报错了，控制台报错如下：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%8A%A5%E9%94%99.jpg" alt="报错"><a id="more"></a></p>
<p>　　很明显，没有识别到“${jdbc.driverClassName}”的“真实面目”，检查了一遍配置文件，发现一切正常啊，怎么会这样呢？</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.jpg" alt="数据源配置"></p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E5%A4%96%E9%83%A8%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.jpg" alt="资源文件配置"></p>
<h3 id="查错"><a href="#查错" class="headerlink" title="查错"></a>查错</h3><p>　　于是google了一下报错，看了一些解决方案，基本都是一样的说法，都是从同一个答案copy出来的，于事无补。很无奈啊，到底出了什么幺蛾子……<br>后来在解决Nature’s call时突然想到，配置文件应该能找到的吧？结果发现是这样：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E5%A4%9A%E4%B8%AA%E9%80%89%E9%A1%B9.jpg" alt="多个同名配置文件"></p>
<p>　　竟然有两个同名的配置文件，这时候才恍然大悟，想起来我之前统一抽取过配置文件，Ctrl+Shift+Alt+s看一下，发现果然如此。</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg" alt="项目结构配置"></p>
<p>　　红色箭头指的地方加了一些配置文件，里面就有一个叫做jdbc.properties的配置文件，内容是这样的：</p>
<p><img src="http://orujzh93n.bkt.clouddn.com/jdbc%E9%85%8D%E7%BD%AE.jpg" alt="同名jdbc配置的内容"></p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>　　spring在找同名的jdbc.properties时优先去SDKs设置里找了，然后发现里面并没有叫jdbc.driverClassName的东西，于是报错。把E:\config这个配置去掉，重跑一次，一切OK!</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>　　那么在保持原有SDKs设置的情况下，怎样才能读到正确的配置呢？</p>
<ul>
<li>把你要用到的那个jdbc.properties重命名，比如改成db.properties；</li>
<li>把classpath改成classpath*，因为在同一路径下存在同名配置文件时，classpath只会读取类路径下的第一个，而classpath*除了当前类路径，还会扫描jar包中的类加载路径，并且会读取所有同名配置文件。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> spring </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[首篇]]></title>
      <url>/2017/06/20/%E9%A6%96%E7%AF%87/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>　　域名取自家里领导，本着不备案，不浪费域名的想法，搭了个个人博客，以后会在这里分享一些学习所得，兼做个人总结，温故而知新。<a id="more"></a></p>
<h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>　　本网站IP借用自<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，博客框架则来自<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="external">Hexo</a>，主题采用了<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>，同时采用<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云</a>存储，感谢这些项目和平台的帮助！</p>
]]></content>
      
        <categories>
            
            <category> 杂感 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
